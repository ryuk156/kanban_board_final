{"ast":null,"code":"import db from './../firebase/init';\nexport const getBoards = async email => {\n  try {\n    const snapshot = await db.collection('boards').where('user', '==', email).orderBy('name', 'desc').get();\n    const boards = snapshot.docs.map(d => ({ ...d.data(),\n      id: d.id\n    }));\n    return boards;\n  } catch (error) {\n    return [];\n  }\n};\n/**\r\n * Method which adds a board\r\n * @param {string} id for the doc\r\n * @param {object} board the board which has to be created\r\n */\n\nexport const addBoard = async board => {\n  try {\n    await db.collection('boards').add(board);\n    return true;\n  } catch (error) {\n    return error;\n  }\n};\n/**\r\n * Gets a single board with a given ID\r\n * @param {string} id single board ID\r\n */\n\nexport const getBoard = async id => {\n  try {\n    const board = await db.collection('boards').doc(id).get();\n    return { ...board.data(),\n      id: board.id\n    };\n  } catch (error) {\n    // console.log(error);\n    return error;\n  }\n};\nexport const deleteBoard = async id => {\n  try {\n    await db.collection('boards').doc(id).delete();\n    return true;\n  } catch (error) {\n    // console.log(error);\n    return error;\n  }\n};\nexport const getColumns = async boardId => {\n  try {\n    const snapshot = await db.collection('columns').where('boardId', '==', boardId).orderBy('created').get();\n    const boards = snapshot.docs.map(d => ({ ...d.data(),\n      id: d.id\n    }));\n    return boards;\n  } catch (error) {\n    return [];\n  }\n};\nexport const addColumn = async column => {\n  try {\n    const d = await db.collection('columns').add(column);\n    return d.id;\n  } catch (error) {\n    return error;\n  }\n};\n/**\r\n * to update column\r\n * @param {string} id the id of the column\r\n * @param {any} column updated schema of column\r\n */\n\nexport const updateColumn = async (id, column) => {\n  try {\n    await db.collection('columns').doc(id).update(column);\n    return true;\n  } catch (error) {\n    return error;\n  }\n};\n/**\r\n * to delete column\r\n * @param {string} id the id of the column\r\n */\n\nexport const deleteColumn = async id => {\n  try {\n    await db.collection('columns').doc(id).delete();\n    return true;\n  } catch (error) {\n    return error;\n  }\n};","map":{"version":3,"sources":["C:/Users/Dell/Desktop/meet/pro-organiser-application/src/utils/data.js"],"names":["db","getBoards","email","snapshot","collection","where","orderBy","get","boards","docs","map","d","data","id","error","addBoard","board","add","getBoard","doc","deleteBoard","delete","getColumns","boardId","addColumn","column","updateColumn","update","deleteColumn"],"mappings":"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","sourcesContent":["import db from './../firebase/init';\r\n\r\nexport const getBoards = async (email) => {\r\n  try {\r\n    const snapshot = await db\r\n      .collection('boards')\r\n      .where('user', '==', email)\r\n      .orderBy('name', 'desc')\r\n      .get();\r\n    const boards = snapshot.docs.map((d) => ({ ...d.data(), id: d.id }));\r\n    return boards;\r\n  } catch (error) {\r\n    return [];\r\n  }\r\n};\r\n\r\n/**\r\n * Method which adds a board\r\n * @param {string} id for the doc\r\n * @param {object} board the board which has to be created\r\n */\r\nexport const addBoard = async (board) => {\r\n  try {\r\n    await db.collection('boards').add(board);\r\n    return true;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\n/**\r\n * Gets a single board with a given ID\r\n * @param {string} id single board ID\r\n */\r\nexport const getBoard = async (id) => {\r\n  try {\r\n    const board = await db.collection('boards').doc(id).get();\r\n    return { ...board.data(), id: board.id };\r\n  } catch (error) {\r\n    // console.log(error);\r\n    return error;\r\n  }\r\n};\r\n\r\nexport const deleteBoard = async (id) => {\r\n  try {\r\n    await db.collection('boards').doc(id).delete();\r\n    return true;\r\n  } catch (error) {\r\n    // console.log(error);\r\n    return error;\r\n  }\r\n};\r\n\r\nexport const getColumns = async (boardId) => {\r\n  try {\r\n    const snapshot = await db\r\n      .collection('columns')\r\n      .where('boardId', '==', boardId)\r\n      .orderBy('created')\r\n      .get();\r\n    const boards = snapshot.docs.map((d) => ({ ...d.data(), id: d.id }));\r\n    return boards;\r\n  } catch (error) {\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const addColumn = async (column) => {\r\n  try {\r\n    const d = await db.collection('columns').add(column);\r\n    return d.id;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\n/**\r\n * to update column\r\n * @param {string} id the id of the column\r\n * @param {any} column updated schema of column\r\n */\r\nexport const updateColumn = async (id, column) => {\r\n  try {\r\n    await db.collection('columns').doc(id).update(column);\r\n    return true;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\n/**\r\n * to delete column\r\n * @param {string} id the id of the column\r\n */\r\nexport const deleteColumn = async (id) => {\r\n  try {\r\n    await db.collection('columns').doc(id).delete();\r\n    return true;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}