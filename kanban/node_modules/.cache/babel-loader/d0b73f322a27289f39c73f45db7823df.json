{"ast":null,"code":"import db from './../firebase/init';\nexport const getBoards = async email => {\n  try {\n    const snapshot = await db.collection('boards').where('user', '==', email).get();\n    const boards = snapshot.docs.map(d => ({ ...d.data(),\n      id: d.id\n    }));\n    console.log(boards);\n    return boards;\n  } catch (error) {\n    return [];\n  }\n};\n/**\r\n * Method which adds a board\r\n * @param {string} id for the doc\r\n * @param {object} board the board which has to be created\r\n */\n\nexport const addBoard = async board => {\n  try {\n    await db.collection('boards').add(board);\n    return true;\n  } catch (error) {\n    return error;\n  }\n};\n/**\r\n * Gets a single board with a given ID\r\n * @param {string} id single board ID\r\n */\n\nexport const getBoard = async id => {\n  try {\n    const board = await db.collection('boards').doc(id).get();\n    return { ...board.data(),\n      id: board.id\n    };\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deleteBoard = async id => {\n  try {\n    await db.collection('boards').doc(id).delete();\n    return true;\n  } catch (error) {\n    // console.log(error);\n    return error;\n  }\n};\nexport const getColumns = async boardId => {\n  try {\n    const snapshot = await db.collection('columns').where('boardId', '==', boardId).orderBy('created').get();\n    const boards = snapshot.docs.map(d => ({ ...d.data(),\n      id: d.id\n    }));\n    return boards;\n  } catch (error) {\n    return [];\n  }\n};\nexport const addColumn = async column => {\n  try {\n    const d = await db.collection('columns').add(column);\n    return d.id;\n  } catch (error) {\n    return error;\n  }\n};\n/**\r\n * to update column\r\n * @param {string} id the id of the column\r\n * @param {any} column updated schema of column\r\n */\n\nexport const updateColumn = async (id, column) => {\n  try {\n    await db.collection('columns').doc(id).update(column);\n    return true;\n  } catch (error) {\n    return error;\n  }\n};\n/**\r\n * to delete column\r\n * @param {string} id the id of the column\r\n */\n\nexport const deleteColumn = async id => {\n  try {\n    await db.collection('columns').doc(id).delete();\n    return true;\n  } catch (error) {\n    return error;\n  }\n};","map":{"version":3,"sources":["C:/Users/Dell/Desktop/kanban_board/kanban/src/utils/data.js"],"names":["db","getBoards","email","snapshot","collection","where","get","boards","docs","map","d","data","id","console","log","error","addBoard","board","add","getBoard","doc","deleteBoard","delete","getColumns","boardId","orderBy","addColumn","column","updateColumn","update","deleteColumn"],"mappings":"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","sourcesContent":["import db from './../firebase/init';\r\n\r\nexport const getBoards = async (email) => {\r\n  try {\r\n    const snapshot = await db\r\n      .collection('boards')\r\n      .where('user', '==', email)\r\n      \r\n      .get();\r\n    const boards = snapshot.docs.map((d) => ({ ...d.data(), id: d.id }));\r\n    console.log(boards)\r\n    return boards;\r\n    \r\n  } catch (error) {\r\n    return []\r\n  }\r\n};\r\n\r\n/**\r\n * Method which adds a board\r\n * @param {string} id for the doc\r\n * @param {object} board the board which has to be created\r\n */\r\nexport const addBoard = async (board) => {\r\n  try {\r\n    await db.collection('boards').add(board);\r\n    return true;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\n/**\r\n * Gets a single board with a given ID\r\n * @param {string} id single board ID\r\n */\r\nexport const getBoard = async (id) => {\r\n  try {\r\n    const board = await db.collection('boards').doc(id).get();\r\n  \r\n    return { ...board.data(), id: board.id };\r\n  } catch (error) {\r\n     console.log(error);\r\n\r\n  }\r\n};\r\n\r\nexport const deleteBoard = async (id) => {\r\n  try {\r\n    await db.collection('boards').doc(id).delete();\r\n    return true;\r\n  } catch (error) {\r\n    // console.log(error);\r\n    return error;\r\n  }\r\n};\r\n\r\nexport const getColumns = async (boardId) => {\r\n  try {\r\n    const snapshot = await db\r\n      .collection('columns')\r\n      .where('boardId', '==', boardId)\r\n      .orderBy('created')\r\n      .get();\r\n    const boards = snapshot.docs.map((d) => ({ ...d.data(), id: d.id }));\r\n    return boards;\r\n  } catch (error) {\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const addColumn = async (column) => {\r\n  try {\r\n    const d = await db.collection('columns').add(column);\r\n    return d.id;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\n/**\r\n * to update column\r\n * @param {string} id the id of the column\r\n * @param {any} column updated schema of column\r\n */\r\nexport const updateColumn = async (id, column) => {\r\n  try {\r\n    await db.collection('columns').doc(id).update(column);\r\n    return true;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\n/**\r\n * to delete column\r\n * @param {string} id the id of the column\r\n */\r\nexport const deleteColumn = async (id) => {\r\n  try {\r\n    await db.collection('columns').doc(id).delete();\r\n    return true;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}